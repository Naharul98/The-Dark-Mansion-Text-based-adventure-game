#BlueJ class context
comment0.target=Game
comment0.text=\r\n\ \ This\ class\ is\ the\ main\ class\ of\ the\ "The\ Dark\ Mansion"\ application.\r\n\ \ To\ play\ this\ game,\ create\ an\ instance\ of\ this\ class\ and\ call\ the\ "play"\r\n\ \ method.\r\n\ \ This\ main\ class\ creates\ and\ initialises\ all\ the\ others\:\ it\ creates\ all\r\n\ \ rooms\ and\ items.\ Also\ creates\ the\ parser\ and\ starts\ the\ game.\ \ It\ also\ evaluates\ and\r\n\ \ executes\ the\ commands\ that\ the\ parser\ returns.\r\n\ @author\ \ A\ K\ M\ NAHARUL\ HAYAT\r\n\r\n\ @version\ 2017.11.25\r\n
comment1.params=
comment1.target=Game()
comment1.text=\r\n\ Create\ the\ game\ and\ initialise\ all\ of\ it's\ variables.\r\n\ initializes\ the\ hashsets,\ hashmaps\ and\ arraylist\r\n\ Creates\ the\ two\ major\ room,\ named\ as\ teleporter\ room\ and\ end\ room.In\ addition,\ also\ creates\ the\ other\ non-major\ rooms\r\n
comment10.params=command
comment10.target=void\ examine(Command)
comment10.text=\ \r\n\ implementation\ of\ the\ 'examine'\ command\:\r\n\ Tries\ to\ examine\ the\ details\ of\ a\ specific\ item\ in\ the\ room\r\n
comment11.params=command
comment11.target=void\ inventory(Command)
comment11.text=\ \r\n\ implementation\ of\ the\ 'inventory'\ command\:\r\n\ prints\ out\ all\ the\ item\ currently\ held\ in\ the\ player's\ inventory\r\n\ also\ prints\ out\ the\ current\ inventory\ weight,\ and\ the\ weight\ limit\ of\ the\ inventory\r\n
comment12.params=command
comment12.target=void\ use(Command)
comment12.text=\ \r\n\ implementation\ of\ the\ 'use'\ command\:\r\n\ implements\ the\ 'using\ one\ item\ with\ another'\ function\ in\ the\ game\r\n\ Checks\ the\ 'useableItems'\ Hashmap\ to\ verify\ if\ the\ 2\ pair\ of\ items\ specified\ in\ the\ command\ is\ useable\ with\ each\ other.\r\n\ if\ they\ are,\ then\ implements\ the\ 'use'\ function\ for\ each\ pair\ of\ items.\r\n\ if\ they\ are\ not\ useable\ with\ each\ other,\ it\ prints\ out\ a\ message\ accordingly\r\n
comment13.params=command
comment13.target=void\ back(Command)
comment13.text=\r\n\ implementation\ of\ the\ 'back'\ command\:\r\n\ takes\ the\ player\ back\ to\ the\ previous\ room\ he\ has\ been\ in\r\n\ note-if\ the\ player\ uses\ the\ teleporter\ room,\ he\ can't\ go\ back\ \r\n\ Immediately\ after\ teleportation,\ as\ he\ was\ teleported\ by\ magic\r\n
comment14.params=command
comment14.target=void\ drop(Command)
comment14.text=\ \r\n\ implementation\ of\ the\ 'drop'\ command\:\r\n\ implements\ dropping\ a\ specified\ item\ from\ the\ inventory\ in\ the\ current\ room\ of\ the\ player\r\n
comment15.params=itemName
comment15.target=boolean\ itemInventoryCheck(java.lang.String)
comment15.text=\r\n\ \#helper\ method\#\r\n\ Checks\ if\ the\ specified\ item\ is\ in\ the\ player's\ inventory\ of\ not,\ returns\ true/false\ according\ to\ it\r\n\ @param\ the\ name\ of\ the\ item\ to\ check\ if\ it\ is\ currently\ in\ the\ inventory\ of\ the\ player\ or\ not\r\n\ @return\ true\ if\ the\ item\ is\ in\ the\ player's\ inventory\r\n\ @return\ false\ if\ not\ in\ the\ player's\ inventory\r\n
comment16.params=itemName
comment16.target=int\ getItemWeight(java.lang.String)
comment16.text=\r\n\ \#helper\ method\#\r\n\ returns\ the\ weight\ of\ the\ item\ name\ specified\ in\ the\ parameter\r\n\ @param\ the\ name\ of\ the\ item\ of\ which\ the\ weight\ is\ to\ be\ returned\r\n\ @return\ the\ weight\ of\ the\ item\ according\ to\ the\ item\ name\ in\ the\ \r\n\ @return\ returns\ 0,\ if\ the\ specified\ item\ in\ the\ parameter\ is\ not\ found\r\n
comment17.params=itemName
comment17.target=java.lang.Boolean\ pickableCheck(java.lang.String)
comment17.text=\r\n\ \#helper\ method\#\r\n\ Checks\ if\ a\ given\ item\ is\ carry\ able\ by\ the\ player\r\n\ @param\ the\ name\ of\ the\ item\ to\ check\ if\ it\ is\ carry\ able\ by\ the\ player\r\n\ @return\ true\ if\ the\ item\ is\ carryable,\ returns\ false\ if\ not,\ returns\ null\ if\ the\ item\ in\ the\ parameter\ is\ not\ found\r\n
comment18.params=itemName
comment18.target=Items\ getItemFromName(java.lang.String)
comment18.text=\r\n\ \#helper\ method\#\r\n\ returns\ item\ object\ corresponding\ to\ the\ name\ of\ the\ item\ provided\ in\ the\ parameter\r\n\ @param\ the\ name\ of\ the\ item\r\n\ @return\ item\ object\ corresponding\ to\ the\ name\r\n\ @return\ returns\ null\ if\ the\ item\ name\ provided\ does\ not\ correspond\ to\ any\ item\ object\r\n
comment19.params=itemName
comment19.target=boolean\ checkItemInRoom(java.lang.String)
comment19.text=\r\n\ \#helper\ method\#\r\n\ checks\ if\ the\ item\ name\ provided\ in\ the\ parameter,\ corresponds\ to\ any\ items\ in\ the\ room\r\n\ @param\ the\ name\ of\ the\ item\r\n\ @return\ true\ if\ there\ is\ an\ item\ in\ the\ current\ room\ with\ the\ name\ provided\ in\ the\ parameter\r\n\ @return\ returns\ false\ if\ the\ item\ name\ provided\ does\ not\ correspond\ to\ any\ item\ object\ in\ the\ room\r\n
comment2.params=
comment2.target=void\ setUpRooms()
comment2.text=\r\n\ This\ method\ sets\ up\ the\ rooms\ for\ the\ gameplay.\r\n\ It\ creates\ all\ the\ rooms\ and\ link\ their\ exits\ together.\r\n\ Creates\ items\ to\ be\ put\ in\ their\ respective\ rooms\r\n
comment20.params=item
comment20.target=java.lang.Boolean\ itemEquipableCheck(java.lang.String)
comment20.text=\r\n\ \#helper\ method\#\r\n\ Checks\ if\ a\ item\ is\ equipable\ in\ the\ inventory\ by\ the\ player\ based\ on\ current\ inventory\ weight\ and\ the\ item\ weight\r\n\ @param\ the\ name\ of\ the\ item\ to\ check\ if\ it\ is\ equipable\ by\ the\ player\ in\ the\ inventory\ based\ on\ its\ weight\r\n\ @return\ true\ if\ the\ item\ is\ equipable\ in\ the\ inventory\r\n\ @return\ false\ if\ not\ equipable,\ returns\ null\ if\ the\ item\ in\ the\ parameter\ is\ not\ found\r\n
comment3.params=
comment3.target=void\ play()
comment3.text=\r\n\ \ Main\ play\ routine.\ \ Loops\ until\ end\ of\ play.\r\n
comment4.params=
comment4.target=void\ printWelcome()
comment4.text=\r\n\ Print\ out\ the\ opening\ message\ for\ the\ player.\r\n
comment5.params=command
comment5.target=boolean\ processCommand(Command)
comment5.text=\r\n\ Given\ a\ command,\ process\ (that\ is\:\ execute)\ the\ command.\r\n\ @param\ command\ The\ command\ to\ be\ processed.\r\n\ @return\ true\ If\ the\ command\ ends\ the\ game,\ false\ otherwise.\r\n
comment6.params=
comment6.target=void\ printHelp()
comment6.text=\r\n\ Print\ out\ some\ help\ information.\r\n\ Here\ we\ print\ some\ stupid,\ cryptic\ message\ and\ a\ list\ of\ the\ \r\n\ command\ words.\r\n
comment7.params=command
comment7.target=void\ goRoom(Command)
comment7.text=\ \r\n\ implementations\ of\ the\ 'go'\ command\:\r\n\ Try\ to\ in\ to\ one\ direction.\ If\ there\ is\ an\ exit,\ enter\ the\ new\r\n\ room,\ otherwise\ print\ an\ error\ message.\r\n
comment8.params=command
comment8.target=boolean\ quit(Command)
comment8.text=\ \r\n\ "Quit"\ was\ entered.\ Check\ the\ rest\ of\ the\ command\ to\ see\r\n\ whether\ we\ really\ quit\ the\ game.\r\n\ @return\ true,\ if\ this\ command\ quits\ the\ game,\ false\ otherwise.\r\n
comment9.params=command
comment9.target=void\ take(Command)
comment9.text=\ \r\n\ implementations\ of\ the\ 'take'\ command\:\r\n\ Tries\ to\ put\ a\ specific\ item\ in\ the\ player's\ inventory\r\n\ Checks\ if\ the\ item\ is\ carrry\ able\ by\ the\ player\r\n\ Checks\ if\ the\ use\ hasn't\ reached\ weight\ limit\ in\ back\ pack.\r\n\ If\ all\ check\ conditions\ are\ satisfied,\ then\ removes\ the\ item\ from\ the\ room\r\n\ and\ places\ the\ item\ in\ the\ player's\ inventory\r\n\ otherwise,\ Prints\ error\ message\ accordingly\r\n
numComments=21
